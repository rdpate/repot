#!/bin/sh -Cue
#.help
# % [PRERELEASE]
#
# Tag current working directory, which must be pristine (clean without unknown files).  PRERELEASE is added as prerelease.
#
# Options:
#    --quiet                  no warnings
#
# Premise:
# * tags are recorded in dedicated ".tags" branch
# * tag names are "M.N.P[-R]"
#     * tagged prerelease must end with a numeric part; eg. rc.1
# * bookmark names "M.N" correspond to greatest released M.N
# * patch progression is linear (within the same M.N), as required by semver
# * minor progression is linear (within the same M), as required by semver
#
# Implementation details:
# * currently only hg is supported
# * .tags subdir is used to commit to ".tags" branch
#     * if modifying history, "rm -r .tags"

# COMMON
    quiet=false
    fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2 || true; exit "$rc"; }
    nonfatal() { $quiet || printf %s\\n "${0##*/}: $*" >&2 || true; }

    _save_semver() {
        saved_semver="${semver:-}"
        saved_major="${major:-}"
        saved_minor="${minor:-}"
        saved_patch="${patch:-}"
        saved_ver_pre="${ver_pre:-}"
        saved_ver_meta="${ver_meta:-}"
        }
    _unsave_semver() {
        semver="$saved_semver"
        major="$saved_major"
        minor="$saved_minor"
        patch="$saved_patch"
        ver_pre="$saved_ver_pre"
        ver_meta="$saved_ver_meta"
        }
    _parse_semver() {
        semver="$1"
        case "$1" in
            [!0123456789]*) return 1 ;;
            *+) return 1 ;;
            *+*)
                ver_meta="${1#*+}"
                set -- "${1%%+*}"
                ;;
            *) ver_meta= ;;
            esac
        # TODO: better validate ver_meta
        case "$1" in
            [0123456789]*.[0123456789]*.[0123456789]*) ;;
            *) return 1 ;;
            esac
        major="${1%%.*}"
        ver_pre="${1#*.}"
        minor="${ver_pre%%.*}"
        ver_pre="${ver_pre#*.}"
        patch="${ver_pre%%-*}"
        case "$ver_pre" in
            *-) return 1 ;;
            *-*) ver_pre="${ver_pre#*-}" ;;
            *) ver_pre= ;;
            esac
        # TODO: better validate ver_pre
        case "$major$minor$patch" in *[!0123456789]*) return 1 ;; esac
        case ".$major.$minor.$patch." in
            *.0[!.]*) return 1 ;;
            esac
        }
    parse_semver() {  # STR
        # sets variables: semver, major, minor, patch, ver_pre, ver_meta
        # semver 2.0.0
        _save_semver
        _parse_semver "$1" || { _unsave_semver; return 1; }
        }
    set_greater_semver() {  # STR
        # if STR in semver format, parse the greater semver
        parse_semver "$1" || return 0
        [ $major -le $saved_major ] || return 0
        [ $major =   $saved_major ] || { _unsave_semver; return 0; }
        [ $minor -le $saved_minor ] || return 0
        [ $minor =   $saved_minor ] || { _unsave_semver; return 0; }
        [ $patch -le $saved_patch ] || return 0
        [ $patch =   $saved_patch ] || { _unsave_semver; return 0; }
        }

    hg_is_pristine() {  # [-Rrepo]
        # "pristine" = clean without unknown files
        # hg identify doesn't consider unknown files when marking clean/dirty
        [ -z "$(hg status "$@" | head -n1)" ]
        }

handle_option() {
    case "$1" in
        quiet)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            quiet=true
            ;;
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --=*) fatal 64 'missing option name' ;;
        --*=*)
            x="${1#--}"
            v="${x#*=}"
            x="${x%%=*}"
            case "$x" in
                :?*|*[\ \`\~\!\@\#\$\%\^\&\*\\\|\;\'\"\?]*) fatal 64 'bad option name' ;;
                :)
                    shift
                    x="$v"
                    while [ -n "$x" ]; do
                        v="${x%?}"
                        set -- -"${x#"$v"}" "$@"
                        x="$v"
                        done
                    ;;
                *)
                    handle_option "$x" "$v"
                    shift
                    ;;
                esac
            ;;
        --:) shift ;;
        --:*|--*[\ \`\~\!\@\#\$\%\^\&\*\\\|\;\'\"\?]*) fatal 64 'bad option name' ;;
        --*) handle_option "${1#--}"; shift ;;
        -[\ \`\~\!\@\#\$\%\^\&\*\=\\\|\;\'\"\?]*) fatal 64 'bad option name' ;;
        -:*)
            x="${1#??}"
            shift
            while [ -n "$x" ]; do
                v="${x%?}"
                set -- -"${x#"$v"}" "$@"
                x="$v"
                done
            ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done

if [ $# = 0 ]; then
    ver_suffix=
else
    case ".$1" in
        .|*' '*|*[-.][-.]*|*.0[0123456789]*) fatal 64 'invalid prerelease' ;;
        # TODO: does semver allow "a--b", "a.-b", or "a.-3" for prerelease?
        esac
    # TODO: more prerelease syntax checks
    # TODO: auto-increment prerelease? prevent skipping numeric parts?
    ver_suffix="-$1"
    fi
version="$("${0%/*}/repo-version" --quiet)"
version="${version%%+*}"
case "$version" in
    *-*) ;;
    *) fatal 65 "already released as $version" ;;
    esac
version="${version%%-*}"
bookmark="${version%.*}"
version="$version$ver_suffix"

if ! hg help -c share >/dev/null 2>&1; then
    fatal 78 'share extension required; see hg help share'
    fi
repo="$(hg root)" || exit 65
cd "$repo"
if hg tags -T'{tag}\n' | grep -Fxq "$version"; then
    fatal 65 "existing tag $version"
    fi
hg_is_pristine || fatal 65 'repository is not pristine (modified, new, or unknown files)'
if [ -e .tags ]; then
    [ -d .tags ] || fatal 65 "unexpected $repo/.tags non-directory"
    [ -d .tags/.hg ] || fatal 65 "$repo/.tags not a repo"
    [ -e .tags/.hg/sharedpath ] || fatal 65 "expected shared repo: $repo/.tags"
else
    hg --quiet share -U --relative . .tags
    fi
if hg -R.tags branches -T'{branch}\n' | grep -q -x \\.tags; then
    hg --quiet -R.tags update .tags
else
    hg --quiet -R.tags branch .tags
    fi
hg_is_pristine -R.tags || fatal 65 "repository not pristine: $repo/.tags"

id="$(hg identify --id)"
msg="tag $version $id"
hg -R.tags tag -m"$msg" -r"$id" "$version"
nonfatal "version $version (rev $id)"
if [ -z "$ver_suffix" ]; then
    # if new version is not pre-release, update M.N and @ bookmarks
    hg --quiet bookmark -r"$id" "$bookmark"
    # update @ only if currently at lower version
    if hg bookmarks -T'{bookmark}\n' | grep -Fxq '@'; then
        parse_semver "$version"
        tags="$(hg identify -t -r@ -T'{join(tags,":")}:')"
        while [ -n "$tags" ]; do
            tag="${tags%%:*}"
            tags="${tags#*:}"
            set_greater_semver "$tag"
            done
        if [ x"$version" = x"$semver" ]; then
            hg --quiet bookmark -r"$id" @
            nonfatal "updated @ bookmark to $version"
            fi
    else
        hg --quiet bookmark -r"$id" @
        nonfatal "set @ bookmark to $version"
        fi
    fi
# TODO: should hg-git bookmark "master" be touched?
